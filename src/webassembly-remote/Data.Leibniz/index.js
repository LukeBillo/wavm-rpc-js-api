// Generated by purs version 0.12.3
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Prelude = require("../Prelude/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Leibniz = function (x) {
    return x;
};
var Distinguish = {};
var unDistinguished = function (dictDistinguish) {
    return Unsafe_Coerce.unsafeCoerce;
};
var trans = function (v) {
    return function (v1) {
        return function ($30) {
            return v1(v($30));
        };
    };
};
var symm = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var semigroupoidLeibniz = new Control_Semigroupoid.Semigroupoid(Data_Function.flip(trans));
var runLeibniz = function (v) {
    return v;
};
var refl = Control_Category.identity(Control_Category.categoryFn);
var lowerLeibniz3of3 = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var lowerLeibniz2of3 = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var lowerLeibniz2of2 = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var lowerLeibniz1of3 = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var lowerLeibniz1of2 = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var lowerLeibniz = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var distinguished = function (dictDistinguish) {
    return Unsafe_Coerce.unsafeCoerce;
};
var distinguishRight = Distinguish;
var distinguishLeft = Distinguish;
var refute = function (dictDistinguish) {
    return function (l) {
        return Data_Void.absurd(unDistinguished(dictDistinguish)(runLeibniz(l)(distinguished(distinguishLeft)(Data_Unit.unit))));
    };
};
var coerceSymm = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var coerce = function (v) {
    return Unsafe_Coerce.unsafeCoerce;
};
var categoryLeibniz = new Control_Category.Category(function () {
    return semigroupoidLeibniz;
}, refl);
var applyLeibniz3of3 = function (v) {
    return function (v1) {
        return Unsafe_Coerce.unsafeCoerce;
    };
};
var liftLeibniz3of3 = applyLeibniz3of3(Control_Category.identity(categoryLeibniz));
var applyLeibniz2of3 = function (v) {
    return function (v1) {
        return Unsafe_Coerce.unsafeCoerce;
    };
};
var liftLeibniz2of3 = applyLeibniz2of3(Control_Category.identity(categoryLeibniz));
var applyLeibniz2of2 = function (v) {
    return function (v1) {
        return Unsafe_Coerce.unsafeCoerce;
    };
};
var liftLeibniz2of2 = applyLeibniz2of2(Control_Category.identity(categoryLeibniz));
var applyLeibniz1of3 = function (v) {
    return function (v1) {
        return Unsafe_Coerce.unsafeCoerce;
    };
};
var liftLeibniz1of3 = applyLeibniz1of3(Control_Category.identity(categoryLeibniz));
var applyLeibniz1of2 = function (v) {
    return function (v1) {
        return Unsafe_Coerce.unsafeCoerce;
    };
};
var liftLeibniz1of2 = applyLeibniz1of2(Control_Category.identity(categoryLeibniz));
var applyLeibniz = function (v) {
    return function (v1) {
        return Unsafe_Coerce.unsafeCoerce;
    };
};
var liftLeibniz = applyLeibniz(Control_Category.identity(categoryLeibniz));
module.exports = {
    Leibniz: Leibniz,
    runLeibniz: runLeibniz,
    coerce: coerce,
    coerceSymm: coerceSymm,
    symm: symm,
    liftLeibniz: liftLeibniz,
    liftLeibniz1of2: liftLeibniz1of2,
    liftLeibniz2of2: liftLeibniz2of2,
    liftLeibniz1of3: liftLeibniz1of3,
    liftLeibniz2of3: liftLeibniz2of3,
    liftLeibniz3of3: liftLeibniz3of3,
    applyLeibniz: applyLeibniz,
    applyLeibniz1of2: applyLeibniz1of2,
    applyLeibniz2of2: applyLeibniz2of2,
    applyLeibniz1of3: applyLeibniz1of3,
    applyLeibniz2of3: applyLeibniz2of3,
    applyLeibniz3of3: applyLeibniz3of3,
    lowerLeibniz: lowerLeibniz,
    lowerLeibniz1of2: lowerLeibniz1of2,
    lowerLeibniz2of2: lowerLeibniz2of2,
    lowerLeibniz1of3: lowerLeibniz1of3,
    lowerLeibniz2of3: lowerLeibniz2of3,
    lowerLeibniz3of3: lowerLeibniz3of3,
    Distinguish: Distinguish,
    refute: refute,
    semigroupoidLeibniz: semigroupoidLeibniz,
    categoryLeibniz: categoryLeibniz,
    distinguishLeft: distinguishLeft,
    distinguishRight: distinguishRight
};
